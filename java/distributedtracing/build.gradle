/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
    id 'pmd'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
}

dependencies {
    implementation 'io.opentelemetry:opentelemetry-sdk:0.8.0'
    implementation 'io.opentelemetry:opentelemetry-exporters-inmemory:0.8.0'
    implementation 'io.opentelemetry:opentelemetry-exporters-logging:0.8.0'
    implementation 'io.opentelemetry:opentelemetry-extension-trace-propagators:0.8.0'
    implementation 'com.newrelic.telemetry:opentelemetry-exporters-newrelic:0.8.1'
}

java {
    withJavadocJar()
    withSourcesJar()
}

def projectGroup = 'com.sample'
def projectVersion = '0.0.1-SNAPSHOT'
def projectName = 'telemetrynewrelic'

version(projectVersion)

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileJava {
    sourceCompatibility(JavaVersion.VERSION_11.toString())
    targetCompatibility(JavaVersion.VERSION_11.toString())
}

checkstyle {
    toolVersion = "8.36.2"
    configFile = file("config/checkstyle/checks.xml")
    checkstyleMain {
        source("src/main/java")
        ignoreFailures = false
        showViolations = true
    }
    checkstyleTest {
        source("src/main/test")
    }
}

pmd {
    toolVersion = "6.28.0"
    setRuleSetFiles(files("config/pmd/ruleset.xml"))
    ignoreFailures(false)
    setConsoleOutput(true)
}



publishing {
    repositories {
        maven {
            setName("GitHubPackages")
            setUrl('https://maven.pkg.github.com/satya256/distributed-tracing-newrelic')
            credentials {
                setUsername(System.getenv('USERNAME'))
                setPassword(System.getenv('TOKEN'))
            }
        }
    }

    publications {
        release(MavenPublication) {
            setGroup(projectGroup)
            setVersion(projectVersion)
            artifactId = projectName
            from(components.java)

            pom {
                name = 'Open telemetry Newrelic Exporter'
                description = 'Open telemetry Newrelic Exporter'
            }
        }
    }
}

task cleanBuildPublish {
    dependsOn 'clean'
    dependsOn 'build'
    dependsOn 'publish'
    tasks.findByName('build').mustRunAfter 'clean'
    tasks.findByName('publish').mustRunAfter 'build'
}
